CREATE TYPE Address AS OBJECT (
city VARCHAR2(35),
houseno number(5)
);
/
CREATE TYPE Person AS OBJECT (
first_name VARCHAR2(15),
last_name VARCHAR2(15),
home_address Address,
phone_number VARCHAR2(15),
MEMBER PROCEDURE display_address ( SELF IN OUT NOCOPY Person )
)
/
CREATE TYPE BODY Person AS
MEMBER PROCEDURE display_address ( SELF IN OUT NOCOPY Person ) IS
BEGIN
DBMS_OUTPUT.PUT_LINE(first_name || ' ' || last_name);
DBMS_OUTPUT.PUT_LINE(home_address .city||' '||home_address .houseno);
END;
END;
/
CREATE TABLE Family1 OF Person;
/
SELECT * FROM Family1;
/
DECLARE
p1 Person; -- p1 & p2 is atomically null
p2 Person;
BEGIN
-- call the constructor for Person_type
p1 := Person('Akshay', 'Patil',Address('Pune',400),'987685434');
INSERT INTO Family1 VALUES(p1);
DBMS_OUTPUT.PUT_LINE(p1.first_name || ' ' || p1.last_name||'
'||p1.home_address.city); -- display details
p2 := Person('Megha', 'Joshi',Address('Nashik',500),'987685987');
INSERT INTO Family1 VALUES(p2);
DBMS_OUTPUT.PUT_LINE(p2.first_name || ' ' || p2.last_name||'
'||p2.home_address.city); -- display details
END;
/
DECLARE
p1 Person;
p2 Person;
BEGIN
SELECT VALUE(f) INTO p1 FROM Family1 f
WHERE f.last_name = 'Joshi';
--- DBMS_OUTPUT.PUT_LINE(p1.first_name || ' ' || p1.last_name); -- display details
p1.display_address();
p2 := p1;
p1.last_name := 'Kale';
DBMS_OUTPUT.PUT_LINE(p1.first_name || ' ' || p1.last_name); -- display details
END;
/
SELECT * FROM Family1;
/
BEGIN
UPDATE Family1 f SET f.first_name = 'Meenakshi'
WHERE f.last_name = 'Joshi';
END;
/
SELECT * FROM Family1;
/
BEGIN
DELETE FROM Family1 f
WHERE f.first_name = 'Akshay';
END;
/
SELECT * FROM Family1;
/

----------------------------------------------------------------------------------------------

Prac 2

CREATE TABLE EmployeeData OF xmltype
/
BEGIN
INSERT INTO EmployeeData
VALUES ('<EmployeeData>'
||'<employee id="346">'
||'<firstname>Darren</firstname>'
||'<lastname>Dsouza</lastname>'
||'<hireDate>2/8/22</hireDate>'
||'</employee>'
||'<employee id="123">'
||'<firstname>Manoj</firstname>'
||'<lastname>Dsouza</lastname>'
||'<hireDate>5/8/22</hireDate>'
||'</employee>'
||'</EmployeeData>');
COMMIT;
END;
/
SELECT xmlquery(
'<Summary lineItemCount="{count($XML/EmployeeData/employee)}">{
$XML/EmployeeData/employee
}
</Summary>'
passing object_value AS "XML"
 returning content
).getclobval() initial_state
FROM EmployeeData
/
UPDATE EmployeeData
SET object_value = XMLQuery
(
'copy $NEWXML := $XML modify (
for $ED in $NEWXML/EmployeeData/employee[@id="123"] return (
replace value of node $ED/firstname with $firstname1
)
)
return $NEWXML'
passing object_value as "XML",
'Danny' as "firstname1"
returning content
)
WHERE xmlExists(
'$XML/EmployeeData/employee/hiredate=$REF'
passing object_value as "XML",
'5/8/22' as "REF"
)
/
UPDATE EmployeeData
SET object_value = XMLQuery
(
'copy $NEWXML := $XML modify (
delete nodes $NEWXML/EmployeeData/employee[@id=$id]
)
return $NEWXML'
 passing object_value as "XML",
'123' as "id"
returning content
)

--------------------------------------------------------------------------------------------

prac 3

CREATE TABLE cola_markets (
mkt_id NUMBER PRIMARY KEY,
name VARCHAR2(32),
shape SDO_GEOMETRY);
INSERT INTO cola_markets VALUES(
1,
'cola_a',
SDO_GEOMETRY(
2003, 
NULL,
NULL,
SDO_ELEM_INFO_ARRAY(1,1003,3), -- one rectangle (1003 = exterior)
SDO_ORDINATE_ARRAY(1,1, 5,7) -- only 2 points needed to
-- define rectangle (lower left and upper right) with
-- Cartesian-coordinate data
)
);
INSERT INTO cola_markets VALUES(
2,
'cola_b',
SDO_GEOMETRY(
2003, -- two-dimensional polygon
NULL,
NULL,
SDO_ELEM_INFO_ARRAY(1,1003,1), -- one polygon (exterior polygon ring)
SDO_ORDINATE_ARRAY(5,1, 8,1, 8,6, 5,7, 5,1)
)
);
INSERT INTO cola_markets VALUES(
3,
'cola_c',
SDO_GEOMETRY(
2003, -- two-dimensional polygon
NULL,
NULL,
SDO_ELEM_INFO_ARRAY(1,1003,1), -- one polygon (exterior polygon ring)
SDO_ORDINATE_ARRAY(3,3, 6,3, 6,5, 4,5, 3,3)
)
);
INSERT INTO cola_markets VALUES(
 4,
'cola_d',
SDO_GEOMETRY(
2003, -- two-dimensional polygon
NULL,
NULL,
SDO_ELEM_INFO_ARRAY(1,1003,4), -- one circle
SDO_ORDINATE_ARRAY(8,7, 10,9, 8,11)
)
);
CREATE INDEX cola_spatial_idx
ON cola_markets(shape)
INDEXTYPE IS MDSYS.SPATIAL_INDEX;
SELECT SDO_GEOM.SDO_INTERSECTION(c_a.shape, c_c.shape, 0.005)
FROM cola_markets c_a, cola_markets c_c
WHERE c_a.name = 'cola_a' AND c_c.name = 'cola_c';
-- Do two geometries have any spatial relationship?
SELECT SDO_GEOM.RELATE(c_b.shape, 'anyinteract', c_d.shape, 0.005)
FROM cola_markets c_b, cola_markets c_d
WHERE c_b.name = 'cola_b' AND c_d.name = 'cola_d';
-- Return the areas of all cola markets.
SELECT name, SDO_GEOM.SDO_AREA(shape, 0.005) FROM cola_markets;
-- Return the area of just cola_a.
SELECT c.name, SDO_GEOM.SDO_AREA(c.shape, 0.005) FROM cola_markets c
WHERE c.name = 'cola_a';
-- Return the distance between two geometries.
SELECT SDO_GEOM.SDO_DISTANCE(c_b.shape, c_d.shape, 0.005)
FROM cola_markets c_b, cola_markets c_d
WHERE c_b.name = 'cola_b' AND c_d.name = 'cola_d';
-- Is a geometry valid?
SELECT c.name, SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT(c.shape,
0.005)
FROM cola_markets c WHERE c.name = 'cola_c';
-- Is a layer valid? (First, create the results table.)
CREATE TABLE val_results (sdo_rowid ROWID, result VARCHAR2(2000));
CALL SDO_GEOM.VALIDATE_LAYER_WITH_CONTEXT('COLA_MARKETS',
'SHAPE',
'VAL_RESULTS', 2);
SELECT * from val_results;

------------------------------------------------------------------------------------------------------
prac 4


CREATE TABLE employees_track_time (
employee_id NUMBER(6) NOT NULL, first_name VARCHAR2(20), last_name
VARCHAR2(25) NOT NULL,
email VARCHAR2(25) NOT NULL, phone_number VARCHAR2(20), hire_date
DATE NOT NULL,
job_id VARCHAR2(10) NOT NULL, salary NUMBER(8,2), commission_pct
NUMBER(2,2),
manager_id NUMBER(6), department_id NUMBER(4),
PERIOD FOR emp_track_time)

;

SELECT SUBSTR(COLUMN_NAME,1,22) NAME, SUBSTR(DATA_TYPE,1,28)
DATA_TYPE, COLUMN_ID AS COL_ID,
SEGMENT_COLUMN_ID AS SEG_COL_ID, INTERNAL_COLUMN_ID AS
INT_COL_ID, HIDDEN_COLUMN
FROM USER_TAB_COLS WHERE
TABLE_NAME='EMPLOYEES_TRACK_TIME'

;

INSERT INTO employees_track_time (emp_track_time_start, emp_track_time_end,
employee_id, first_name,
last_name, email, hire_date, job_id, salary, manager_id, department_id)
VALUES (TIMESTAMP '2009-06-01 12:00:01 Europe/Paris',
TIMESTAMP '2012-11-30 12:00:01 Europe/Paris', 251, 'Scott', 'Tiger',
'scott.tiger@example.com', DATE '2009-05-21', 'IT_PROG', 60000, 103,
60)

;

INSERT INTO employees_track_time (emp_track_time_start, emp_track_time_end,
employee_id, first_name,
last_name, email, hire_date, job_id, salary, manager_id, department_id)
VALUES (TIMESTAMP '2009-06-01 12:00:01 Europe/Paris',
TIMESTAMP '2012-12-31 12:00:01 Europe/Paris', 252, 'Jane', 'Lion',
'jane.lion@example.com', DATE '2009-06-11', 'IT_PROG', 60000, 103,
60)

;

INSERT INTO employees_track_time (emp_track_time_start, emp_track_time_end,
employee_id, first_name,
last_name, email, hire_date, job_id, salary, manager_id, department_id)
VALUES (TIMESTAMP '2011-07-01 12:00:01 Europe/Paris',
TIMESTAMP '2014-08-31 12:00:01 Europe/Paris', 253, 'Marie', 'Smith',
'marie.smith@example.com', DATE '2011-06-10', 'IT_PROG', 60000,
103, 60)

;

UPDATE employees_track_time set manager_id = 105
WHERE emp_track_time_start <= TIMESTAMP '2009-06-01 12:00:01 Europe/Paris'

;

SELECT employee_id, last_name, first_name, manager_id FROM employees_track_time

;

DELETE employees_track_time WHERE emp_track_time_end < TIMESTAMP '2001-12-31
12:00:01 Europe/Paris'
    
;

SELECT employee_id FROM employees_track_time
WHERE emp_track_time_start > TIMESTAMP '2009-05-31 12:00:01 Europe/Paris' AND
emp_track_time_end < TIMESTAMP '2012-12-01 12:00:01 Europe/Paris'
    
;

SELECT employee_id FROM employees_track_time AS OF PERIOD FOR
emp_track_time TIMESTAMP '2012-12-01 12:00:01 Europe/Paris'

--------------------------------------------------------------------------------------------------

https://github.com/kibson6781/Kibson-678/blob/main/ADBMS.pdf

--------------------------------------------------------------------------------------------------------------
