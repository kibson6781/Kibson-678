****************************************TRANSALATION***************************************


'''Write a python program to perform Transalation operation on triangle by taking initial coordinates from user.'''

from tkinter import *

root = Tk()
canvas = Canvas(root, bg="yellow", height=700, width=700)
x0 = 100
y0 = 100
x1 = 200
y1 = 200
canvas.create_text(190, 50, text="Rectangle before translation", fill="black", font=('Helvetica 15 bold'))
rect = canvas.create_rectangle(x0, y0, x1, y1, fill="green")
tx = 300
ty = 300
canvas.create_text(300, 300, text="Rectangle after translation", fill="black", font=('Helvetica 15 bold'))
rect = canvas.create_rectangle(x0 + tx, y0 + ty, x1 + tx, y1 + ty, fill="pink")
canvas.pack()
mainloop()


***************************************8SCALING********************************************

'''Write a python program to perform Scaling operation on polygon by taking initial coordinates from user.'''

#pract2
from tkinter import *
root=Tk()
x0=int(input("Enter x0:- "))  				#100
y0=int(input("Enter y0:- "))  				#100
x1=int(input("Enter x1:- "))				#50
y1=int(input("Enter y1:- "))				#200
x2=int(input("Enter x2:- "))				#150
y2=int(input("Enter y2:- "))				#200
C=Canvas(root,bg="black",height=1000,width=1000)
C.create_text(150,40,text="Triangle Before scaling",fill="white")
triangle1=C.create_polygon(x0,y0,x1,y1,x2,y2,fill="orange")
C.create_text(150,500,text="Triangle After scaling",fill="white")
sx=2
sy=2
triangle2=C.create_polygon(x0*sx,y0*sy,x1*sx,y1*sy,x2*sx,y2*sy,fill="green")
C.pack()
mainloop()


*****************************************REFLECTION**********************************

'''Write a python program to perform reflection operation on polygon by taking initial coordinates from user.'''

from tkinter import*
import math
root = Tk()
C = Canvas(root,bg="black",height=1000,width=1000)
x0 = int(input("Enter x0: "))				#100
y0 = int(input("Enter y0: "))				#100
x1 = int(input("Enter x1: "))				#50
y1 = int(input("Enter y1: "))				#200
x2 = int(input("Enter x2: "))				#150			
y2 = int(input("Enter y2: "))				#200
triangle=C.create_polygon(x0,y0,x1,y1,x2,y2,fill="blue")
a=200
y10=-y0+(2*a)
y11=-y1+(2*a)
y12=-y2+(2*a)
triangle=C.create_polygon(x0,y10,x1,y11,x2,y12,fill="green")
C.pack()
mainloop()

****************************************ROTATION***********************************

"""Write a python program to rotate right angle triangle by 45 degree by taking initial coordinates from user."""

import math
from tkinter import *
root=Tk()
n=int(input("Enter angle"))				#45
a=math.cos(math.radians(n))
b=math.sin(math.radians(n))
x0=int(input("Enter x0:- "))				#100
y0=int(input("Enter y0:- "))				#100
x1=int(input("Enter x1:- "))				#50
y1=int(input("Enter y1:- "))				#200
x2=int(input("Enter x2:- "))				#150
y2=int(input("Enter y2:- "))				#200
C=Canvas(root,bg="black",height=1000,width=1000)
C.create_text(190,40,text="Triangle Before rotation in green",fill="green",font=('Consolas'))
triangle1=C.create_polygon(x0,y0,x1,y1,x2,y2,fill="green")
x11=abs(x0*a-y0*b)
y11=abs(x0*b+y0*a)
x12=abs(x1*a-y1*b)
y12=abs(x1*b+y1*a)
x13=abs(x2*a-y2*b)
y13=abs(x2*b+y2*a)
C.create_text(300,60,text="Triangle After rotation in blue",fill="blue",font=('Consolas'))
triangle2=C.create_polygon(x11,y11,x12,y12,x13,y13,fill="blue")
C.pack()
mainloop()

********************************************SHEARING************************************

"""Write a python program to perform shearing on rectangle in positive direction of x-axis by taking initial coordinates from user."""

import math
from tkinter import *
root=Tk()
b=int(input("Enter angle of shearing:- "))		#50
x0=int(input("Enter x0:- "))				#100
y0=int(input("Enter y0:- "))				#100
x1=int(input("Enter x1:- "))				#100
y1=int(input("Enter y1:- "))				#200
x2=int(input("Enter x2:- "))				#300
y2=int(input("Enter y2:- "))				#200
x3=int(input("Enter x3:- "))				#300
y3=int(input("Enter y3:- "))				#100
a=math.tan(math.radians(b))
C=Canvas(root,bg="black",height=1000,width=1000)
triangle1=C.create_polygon(x0,y0,x1,y1,x2,y2,x3,y3,fill="green")
xsh1=x0+y0*a
xsh2=x3+y3*a
triangle2=C.create_polygon(xsh1,y0,x1,y1,x2,y2,xsh2,y3,fill="blue")
C.pack()
mainloop()


**********************************REFLECTION TRANSALATION AND SCALING********************

"""Write a python program to create below shape and perform reflection about parallel to y-axis, followed by translation and scaling operation on it."""

from tkinter import *
root = Tk()
canvas = Canvas(root,bg="black", width=1000, height=1000)
x0 = int(input("Enter x0: "))                                  
y0 = int(input("Enter y0: "))
x1 = int(input("Enter x1: ")) 
y1 = int(input("Enter y1: "))
x2 = int(input("Enter x2: "))
y2 = int(input("Enter y2: "))                         (150,120,65,200,150,280,150,245,250,245,250,155,150,155)
x3 = int(input("Enter x3: "))
y3 = int(input("Enter y3: "))
x4 = int(input("Enter x4: "))
y4 = int(input("Enter y4: "))
x5 = int(input("Enter x5: "))
y5 = int(input("Enter y5: "))
x6 = int(input("Enter x6: "))
y6 = int(input("Enter y6: "))
canvas.create_polygon(x0,y0,x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6, fill="cyan", outline="black")
tx = 200
ty = 200
canvas.create_text(170,300,text="Arrow After translation in Green",fill="green",font=('Helvetica 15 bold'))
canvas.create_polygon(x0+tx,y0+ty,x1+tx,y1+ty,x2+tx,y2+ty,x3+tx,y3+ty,x4+tx,y4+ty,x5+tx,y5+ty,x6+tx,y6+ty, fill="green", outline="black")
sx = 3
sy = 3
canvas.create_text(170,370,text="Arrow After Scaling in Purple",fill="purple",font=('Helvetica 15 bold'))
canvas.create_polygon(x0*sx,y0*sy,x1*sx,y1*sy,x2*sx,y2*sy,x3*sx,y3*sy,x4*sx,y4*sy,x5*sx,y5*sy,x6*sx,y6*sy, fill="purple", outline="black")
a=500
x10=-x0+(2*a)
x11=-x1+(2*a)
x12=-x2+(2*a)
x13=-x3+(2*a)
x14=-x4+(2*a)
x15=-x5+(2*a)
x16=-x6+(2*a)
canvas.create_text(170,450,text="Arrow After Reflection in Cyan",fill="cyan",font=('Helvetica 15 bold'))
canvas.create_polygon(x10,y0,x11,y1,x12,y2,x13,y3,x14,y4,x15,y5,x16,y6, 
fill="cyan", outline="black")
canvas.pack()
root.mainloop()


*******************************************SPACE INVADER****************************************

import pygame
import random
import math
from pygame import mixer

# Initialize pygame module
pygame.init()

# Create Screen
screen = pygame.display.set_mode((800, 600))

# Add icon to the gaming window
icon = pygame.image.load("ufo.png")
pygame.display.set_icon(icon)

# Add title to the gaming window
pygame.display.set_caption("Space Invader")

# Load background image
bg = pygame.image.load("background.png")

# Initialize background sound
mixer.music.load("background.wav")
mixer.music.play(-1)

# Load player image
playerImg = pygame.image.load("player.png")
playerX = 370
playerY = 480
playerX_change = 0

# Initialize enemy variables
enemyImg = []
enemyX = []
enemyY = []
enemyX_change = []
enemyY_change = []
no_of_enemies = 6

for i in range(no_of_enemies):
    enemyImg.append(pygame.image.load("enemy.png"))
    enemyX.append(random.randint(0, 735))
    enemyY.append(random.randint(50, 150))
    enemyX_change.append(3)
    enemyY_change.append(40)

# Load bullet image
bulletImg = pygame.image.load("bullet2.png")
bulletX = 0
bulletY = 480
bulletX_change = 0
bulletY_change = 10
bullet_state = "ready"
score_value = 0

# Load fonts
font1 = pygame.font.Font("freesansbold.ttf", 33)
textX = 10
textY = 10
font2 = pygame.font.Font("freesansbold.ttf", 50)

def game_over_text():
    over_text = font2.render("GAME OVER", True, (150, 200, 200))
    screen.blit(over_text, (200, 250))

def show_score(x, y):
    score = font1.render("Score: " + str(score_value), True, (100, 20, 200))
    screen.blit(score, (x, y))

def player(x, y):
    screen.blit(playerImg, (x, y))

def enemy(x, y, i):
    screen.blit(enemyImg[i], (x, y))

def fire_bullet(x, y):
    global bullet_state
    bullet_state = "fire"
    screen.blit(bulletImg, (x + 16, y + 16))

def isCollision(enemyX, enemyY, bulletX, bulletY):
    distance = math.sqrt((math.pow(enemyX - bulletX, 2)) + (math.pow(enemyY - bulletY, 2)))
    if distance < 27:
        return True
    else:
        return False

# Main game loop
running = True
while running:
    screen.fill((0, 255, 255))
    screen.blit(bg, (0, 0))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_a:
                playerX_change = -5
            if event.key == pygame.K_d:
                playerX_change = 5
            if event.key == pygame.K_SPACE:
                if bullet_state == "ready":
                    bullet_sound = mixer.Sound("laser.wav")
                    bullet_sound.play()
                    bulletX = playerX
                    fire_bullet(bulletX, bulletY)
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_a or event.key == pygame.K_d:
                playerX_change = 0

    playerX += playerX_change
    if playerX <= 0:
        playerX = 0
    elif playerX >= 736:
        playerX = 736

    # Update enemy positions
    for i in range(no_of_enemies):
        enemyX[i] += enemyX_change[i]
        if enemyX[i] <= 0:
            enemyX_change[i] = 3
            enemyY[i] += enemyY_change[i]
        elif enemyX[i] >= 736:
            enemyX_change[i] = -3
            enemyY[i] += enemyY_change[i]

        # Check collision with bullet
        collision = isCollision(enemyX[i], enemyY[i], bulletX, bulletY)
        if collision:
            explosion_sound = mixer.Sound("explosion.wav")
            explosion_sound.play()
            bulletY = 480
            bullet_state = "ready"
            score_value += 1
            enemyX[i] = random.randint(0, 735)
            enemyY[i] = random.randint(50, 150)

        enemy(enemyX[i], enemyY[i], i)

    # Update bullet position
    if bulletY <= 0:
        bulletY = 480
        bullet_state = "ready"
    if bullet_state == "fire":
        fire_bullet(bulletX, bulletY)
        bulletY -= bulletY_change

    # Call player and enemy functions
    player(playerX, playerY)
    show_score(textX, textY)

    pygame.display.update()

pygame.quit()


**************&************************SNAKE GAME***************************

import pygame, sys, random
from pygame.math import Vector2

# Define a class for the snake
class SNAKE:
    def __init__(self):
        # Initialize the snake with a body of three segments and a direction
        self.body = [Vector2(5, 10), Vector2(4, 10), Vector2(3, 10)]
        self.direction = Vector2(1, 0)  # Initial direction is right
        self.new_block = False  # Flag to check if a new block should be added to the snake

    def draw_snake(self):
        # Draw the snake on the screen
        for block in self.body:
            x_pos = int(block.x * cell_size)
            y_pos = int(block.y * cell_size)
            block_rect = pygame.Rect(x_pos, y_pos, cell_size, cell_size)
            pygame.draw.rect(screen, (255, 165, 0), block_rect)  # Orange color for snake

    def move_snake(self):
        # Move the snake based on its current direction
        if self.new_block == True:
            body_copy = self.body[:]
            body_copy.insert(0, body_copy[0] + self.direction)
            self.body = body_copy[:]
            self.new_block = False
        else:
            body_copy = self.body[:-1]
            body_copy.insert(0, body_copy[0] + self.direction)
            self.body = body_copy[:]

    def add_block(self):
        # Add a new block to the snake (when it eats the fruit)
        self.new_block = True

    def reset(self):
        # Reset the snake to its initial state
        self.body = [Vector2(5, 10), Vector2(4, 10), Vector2(3, 10)]

# Define a class for the fruit
class FRUIT:
    def __init__(self):
        self.randomize()

    def draw_fruit(self):
        # Draw the fruit on the screen
        fruit_rect = pygame.Rect(int(self.pos.x * cell_size), int(self.pos.y * cell_size), cell_size, cell_size)
        screen.blit(apple, fruit_rect)

    def randomize(self):
        # Randomly position the fruit on the grid
        self.x = random.randint(0, cell_number - 1)
        self.y = random.randint(0, cell_number - 1)
        self.pos = Vector2(self.x, self.y)

# Define a class for the main game
class MAIN:
    def __init__(self):
        self.snake = SNAKE()
        self.fruit = FRUIT()

    def update(self):
        # Update the game state
        self.snake.move_snake()
        self.check_collision()
        self.check_fail()

    def draw_elements(self):
        # Draw game elements on the screen
        self.fruit.draw_fruit()
        self.snake.draw_snake()
        self.draw_score()

    def check_collision(self):
        # Check if the snake has collided with the fruit
        if self.fruit.pos == self.snake.body[0]:
            self.fruit.randomize()
            self.snake.add_block()

        for block in self.snake.body[1:]:
            if block == self.fruit.pos:
                self.fruit.randomize()

    def check_fail(self):
        # Check if the game has ended (snake hits the wall or itself)
        if not 0 <= self.snake.body[0].x < cell_number or not 0 <= self.snake.body[0].y < cell_number:
            self.game_over()

        for block in self.snake.body[1:]:
            if block == self.snake.body[0]:
                self.game_over()

    # Add code for game_over() function if needed

    def draw_score(self):
        # Draw the player's score on the screen
        score_text = str(len(self.snake.body) - 3)
        score_surface = game_font.render(score_text, True, (56, 74, 12))
        score_x = int(cell_size * cell_number - 60)
        score_y = int(cell_size * cell_number - 40)
        score_rect = score_surface.get_rect(center=(score_x, score_y))
        apple_rect = apple.get_rect(midright=(score_rect.left, score_rect.centery))

        screen.blit(score_surface, score_rect)
        screen.blit(apple, apple_rect)

# Initialize Pygame
pygame.init()
cell_size = 40
cell_number = 20
screen = pygame.display.set_mode((cell_number * cell_size, cell_number * cell_size))
clock = pygame.time.Clock()
apple = pygame.image.load('apple_2.png').convert_alpha()
game_font = pygame.font.Font(None, 48)

# Define a custom event for screen updates
SCREEN_UPDATE = pygame.USEREVENT
pygame.time.set_timer(SCREEN_UPDATE, 150)

# Create the main game instance
main_game = MAIN()

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == SCREEN_UPDATE:
            main_game.update()
        if event.type == pygame.KEYDOWN:
            # Handle keyboard input to change snake direction
            if event.key == pygame.K_w:
                if main_game.snake.direction.y != 1:
                    main_game.snake.direction = Vector2(0, -1)
            if event.key == pygame.K_s:
                if main_game.snake.direction.y != -1:
                    main_game.snake.direction = Vector2(0, 1)
            if event.key == pygame.K_d:
                if main_game.snake.direction.x != -1:
                    main_game.snake.direction = Vector2(1, 0)
            if event.key == pygame.K_a:
                if main_game.snake.direction.x != 1:
                    main_game.snake.direction = Vector2(-1, 0)

    screen.fill((0, 0, 0))  # Black background color
    main_game.draw_elements()

    pygame.display.update()
    clock.tick(60)  # Frame rate




***************************************2D UFO***************************

-----------PlayerController------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PlayerController : MonoBehaviour
{
    private Rigidbody2D rbd;
    public float speed;
    public Text winText;
    public Text countText;
    public int count=0;
    // Start is called before the first frame update
    void Start()
    {
        rbd = GetComponent<Rigidbody2D>(); 
        //getting component by initializing
    }

    // Update is called once per frame
    void FixedUpdate() 
        //void update changed to fixedupdate
    {
        float moveHorizontal = Input.GetAxis("Horizontal"); 
        float moveVertical = Input.GetAxis("Vertical");
        Vector2 movement = new Vector2(moveHorizontal, moveVertical);
        rbd.AddForce(movement*speed);
    }
    void OnTriggerEnter2D(Collider2D other)
    {
        if (other.tag=="PickUp")
        {
            other.gameObject.SetActive(false);
            count++;
            SetCountText();
        }
    }
    void SetCountText()
    {
        countText.text = "Count" + count.ToString();
        if(count==7)
        {
            winText.text = "jeet gaye aap";
        }
    }
}

----------CameraController------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraController : MonoBehaviour
{
    public GameObject player;
    private Vector3 offset;
    // Start is called before the first frame update
    void Start()
    {
        offset = transform.position - player.transform.position; 
    }

    // Update is called once per frame
    void LateUpdate()
    {
        transform.position = player.transform.position + offset;
    }
}
-------Rotator---------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Rotator : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        transform.Rotate(new Vector3(0, 0, 45) * Time.deltaTime);
    }
}



*********************************************3drollball***************************


-----Controller--------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Controller : MonoBehaviour
{
    //declare variable
    public Text winText;
    public Text CountText;
    public int count;
    private Rigidbody rb;
    public float speed;
    // Start is called before the first frame update
    void Start()
    {
        count = 0;
        winText.text = "";
        rb = GetComponent<Rigidbody>();
        SetCountText();
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");
        Vector3 movement = new Vector3(moveHorizontal, 0.0f, moveVertical);
        rb.AddForce(movement * speed);

    }
    void OnTriggerEnter(Collider other)
    {
        if(other.gameObject.CompareTag("PickUp"))
        {
            other.gameObject.SetActive(false);
            count = count + 1;
            SetCountText();
        }
    }
    void SetCountText()
    {
        CountText.text = "Score:" + count.ToString();
        if(count>=8)
        {
            winText.text = "you win!!";
        }
    }
}
-----------Rotator-----------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Rotator : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        transform.Rotate(new Vector3(15, 30, 45) * Time.deltaTime);
    }
}
---------------CameraControiler---------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraController : MonoBehaviour
{
    private Vector3 offset;
    public GameObject player;
    // Start is called before the first frame update
    void Start()
    {
        offset = transform.position - player.transform.position;
    }

    // Update is called once per frame
    void LateUpdate()
    {
        transform.position = player.transform.position + offset;
    }
}
