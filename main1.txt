#Write a program which demonstrates the following:
#Addition of two complex numbers.
#Displaying the conjugate of a complex number.
#Plotting a set of complex numbers.
#Creating a new plot by rotating the given number by a degree 90, 180, 270 degrees and also by scaling by a number a=1/2, a=1/3, a=2 etc.

import matplotlib.pyplot as plt
import numpy as np

print("SELECT OPERATION: ")
print("1. ADDITION OF TWO COMPLEX NUMBERS")
print("2. DISPLAY CONJUGATE OF TWO COMPLEX NUMBERS")
print("3. PLOTING SET OF TWO COMPLEX NUMBERS")
print("4. ROTATION")
print("5. SCALING")
print("6. EXIT")
while True:
    ch= int(input("ENTER CHOICE OF OPERATION"))
    if ch==1:
        c1=complex(input("ENTER COMPLEX FIRST NUMBER: "))
        c2=complex(input("ENTER COMPLEX SECOND NUMBER: "))
        print("ADDITION OF TWO COMPLEX NUMBERS IS: ", c1+c2)
    elif ch==2:
        c1=complex(input("ENTER COMPLEX NUMBER"))
        res=np.conj(c1)
        print("CONJUGATE OF ",c1,"IS",res)
    elif ch==3:
        data=[1+2j,-1+4j,4+3j,-4,2-1j,3+9j,-2+6j,5]
        x=[i.real for i in data]
        y=[i.imag for i in data]
        plt.plot(x,y)
        plt.ylabel('Imaginary')
        plt.xlabel('Real')
        plt.show()
    elif ch==4:
        S=[1+2j,-1+4j,4+3j,-4,2-1j,3+9j,-2+6j,5]
        angle=int(input("ENTER ANGLE OF ROTATION: "))
        if angle==90:
            S1={x*1j for x in S}
        elif angle==180:
            S1={x*(-1) for x in S}
        elif angle==270:
            S1={x*1j*(-1) for x in S}
        else:#2
            print("INVALID ANGLE ENTERED")
        X=[x.real for x in S1]
        Y=[x.imag for x in S1]
        plt.plot(X,Y,'ro')
        plt.show()
    elif ch==5:
        S=[1+2j,-1+4j,4+3j,-4,2-1j,3+9j,-2+6j,5]
        scale=float(input("ENTER SCALE POINT LIKE (.5) for 1/2"))
        S1={x*scale for x in S}
        X=[x.real for x in S1]
        Y=[x.imag for x in S1]
        plt.plot(X,Y,'ro')
        plt.show()
    elif ch==6:
        break
_____________________________________________________________________________________________________________



#Write a program to do the following:
#Enter a vector u as a n-list.
#Enter another vector v as a n-list.
#Find the vector au+bv for different values of a and b.
#Find the dot product of u and v

def addVec(x,y):
    return [x[i]+y[i] for i in range (len(x))]
def subVec(x,y):
    return [x[i]-y[i] for i in range (len(x))]
def scalarMul(x,p):
    return sum([x[i]*p for i in range (len(x))])
def dotMul(x,y):
    return sum([x[i]*y[i] for i in range (len(x))])
v=[]
u=[]
n=int(input("Enter the no. of Elements you want to enter in vector: "))
print("Enter Elements of vector u: ")
for i in range(n):
    e=int(input("Enter elements: "))
    u.append(e)
print("Vector u = ",u)
print("Enter Elements of vector v: ")
for i in range(n):
    e=int(input("Enter elements: "))
    v.append(e)
print("Vector v = ",v)
while True:
    print("Select Vector Operation: ")
    print("1: Addition")
    print("2: Subtraction")
    print("3: Scalar Multiplication")
    print("4: Dot Product")
    print("5: Exit")
    ch=int(input("Enter your Choice: "))
    if ch==1:
        print("Addition of two matrix are",addVec(u,v))
    elif ch==2:
        print("Subtraction of two matrix are",subVec(u,v))
    elif ch==3:
        print("To perform Scalar Multiplication")
        a=int(input("Enter the value of a: "))
        b=int(input("Enter the value of b: "))
        ua=scalarMul(u,a)
        vb=scalarMul(v,b)
        print("Addition of au+bv = ",ua+vb)
    elif ch==4:
        print("Dot Product of two matrix is: ",dotMul(u,v))
    elif ch==5:
        print("Program Terminated Successfully")
        break

_____________________________________________________________________________________________________________

#Aim: Write a program to do the following: 
#Enter two distinct faces as vectors u and v. 
#Find a new face as a linear combination of u and v i.e., au+bv for a and b in R.
#Find the average face of the original faces

def lin_comb(vlist,clist):
    s=[scalarmul(vlist[i],clist[i]) for i in range(len(vlist))]
    l=[]
    for j in range(len(s[0])):
        su=0
        for i in range(len(s)):
            su=su+s[i][j]
        l.appned(su)
    return l
l=int(input("ENTER THE LENGTH OF VECTOR: "))
u=[]
v=[]
c=[]
print("ENTER ELEMENTS OF VECTOR U: ")
for i in range(l):
    n=int(input("ENTER NO:"))
    u.append(n)
print("ENTER THE ELEMENTS OF VECTOR V: ")
for i in range(l):
    m=int(input("ENTER NO: "))
    v.append(m)
print("ENTER VALUES FOR COEFFICIENT: ")
c1=int(input("ENTER FIRST COEFFICIENT :"))
c2=int(input("ENTER SECOND COEFFICIENT :"))

newface=[c1*u[i]+c2*v[i] for i in range(len(u))]
print("NEW FACE OF U and V: ",newface)
avgface=[((u[i]+v[i])/2) for i in range(len(u))]
print("AVERAGE FACE OF U AND V :",avgface)

______________________________________________________________________________________________________


#Aim: Write a program to do the following:
#Enter an r by c matrix M (r and c being positive integers). 
#Display M in matrix format. 
#Display the rows and columns of the matrix M Find the scalar multiplication of M for a given scalar.
#Find the transpose of the matrix M.

r= int(input("Enter the number of rows:"))
c = int(input("Enter the number of columns:"))
matrix = []
print("Enter the entries rowwise:")
for i in range(r):
    a =[]
    for j in range(c):
        a.append(int(input()))
        matrix.append(a)
print("Matrix M:")
for i in range(r):
    for j in range(c):
        print(matrix[i][j],end=" ")
    print()
print("Rows of matrix: ")
for i in range(r):
    print("row",i+1," : ")
    for j in range(c):
        rowm=matrix[i][j]
        print(matrix[i][j],end=" ")
print("Columns of matrix: ")
for i in range(c):
    print("Column",i+1," : ")
    for j in range(r):
        colm=matrix[j][i]
        print(matrix[j][i],end=" ")
    print()
b=[[0 for x in range(r)] for y in range(c)]
for i in range(c):
    for j in range(r):
        b[i][j]=matrix[j][i]
a=int(input("Enter the number to multiply with matrix M:"))
for i in range(r):
    for j in range(c):
        matrix[i][j]=matrix[i][j]*a
print("Scalar Matrix multiplication:")
for i in range(r):
    for j in range(c):
        print(matrix[i][j],end=" ")
print("Transpose of Matrix M: ")
for i in range(c):
    for j in range(r):
        print(b[i][j],end=" ")
    print()

_________________________________________________________________________________________________________


#Aim: Write a program to do the following: 
#Find the vector â€“matrix multiplication of a r by c matrix M with an c-vector u. 
#Find the matrix-matrix product of M with a c by p matrix N.

import numpy as np
r =int(input("Enter length of vector and number of rows in matrix:"))
c =int(input("Enter number of columns in matrix:"))
v=[]
M=[]
print("Enter Vectors")
for i in range(r):
    n=int(input("Enter number:"))
    v.append(n)
print("Enter Matrix")
for i in range(r):
    print("Enter Elements of Rows: ",i+1)
    M.append([])
    for j in range(c):
        n=int(input("Enter Number: "))
        M[i].append(n)
print("\nResult of Vector-Matrix multiplication is",np.dot(v,M))
M=[]
N=[]
r1 =int(input("Enter number of rows in matrix1:"))
c1 =int(input("Enter number of columns in matrix1:"))
print("Enter Matrix1")
for i in range(r1):
    print("Enter Elements of Rows: ",i+1)
    M.append([])

for j in range(c1):
    n=int(input("Enter Number: "))
    M[i].append(n)
r2 =int(input("Enter number of rows in matrix2:"))
c2 =int(input("Enter number of columns in matrix2:"))
print("Enter Matrix2")
for i in range(r2):
    print("Enter Elements of Rows: ",i+1)
    N.append([])
    for j in range(c2):
        n=int(input("Enter Number: "))
        N[i].append(n)
print(M)
print(N)
if(c1 == r2):
    Mult=np.dot(M,N)
    print("\nResult of Matrix multiplication is")
    for i in Mult:
        print(i)
else:
    print("\n Matrix Multiplication not possible as c1 and r2 are not equal")

___________________________________________________________________________________________________________


#Aim: Write a program to enter a matrix and check if it is invertible. If the inverse exists, find the inverse.

import numpy as np
def printMatrix(A):
    print("\nMatrix")
    for i in range(len(A)):
        print(A[i])
c=int(input("Enter the number of rows and coloumns of square matrix:"))
r=c
M=[]
for i in range(r):
    print("Enter Elements of Rows: ")
    M.append([])
    for j in range(c):
        n=int(input("Enter Number: "))
        M[i].append(n)
printMatrix(M)
a=np.linalg.det(M)
print("Determinant of Matrix M is",a)
if a<=0:
    Minv=np.linalg.inv(M)
    print("The Inverse of Matrix m is\n",Minv)
else:
    print("Matrix is not invertible")

________________________________________________________________________________________________________


#Aim: Write a program to convert a matrix into its row echelon form

def row_echelon(m):
    if not m:
        return
    lead= 0
    rowCount = len(m)
    colCount =len(m[0])
    for r in range(rowCount):
        if lead>= colCount:
            return
        i = r
        while m[i][lead] == 0:
            i+=1
            if i == rowCount:
                i = r
                lead +=1
                if colCount == lead:
                    return
                m[i],m[r] = m[r],m[i]
                v = m[r][lead]
                m[r] = [mrx/float(lv) for mrx in m[r]]
                for i in range(rowCount):
                    if i != r:
                        lv=m[i][lead]
                        m[i] = [iv - lv*rv for rv,iv in zip(m[r],m[i])]
                        lead+=1                      
print("Enter dimensions of matrix: ")
r=int(input("Enter the no of rows: "))
c=int(input("Enter the no of cols: "))
mtr=[]

for i in range (r):
    mtr.append([])
    print("Enter elements of rows ",i)
    for j in range(c):
        n=float(input("Enter element: "))
        mtr[i].append(n)
    print("Enter the matrix: ")
    for row in mtr:
        print(' '.join(("{0:.2f}".format(x) for x in row)))
        row_echelon(mtr)
        print("Row Echelon for matrix: ")
        for row in mtr:
            print(' '.join(("{0:.2f}".format(x) for x in row)))

_______________________________________________________________________________________________________


#Aim: Write a program to do the Following: 
#Find the GCD.
#Find Prime Factor of a number.

from math import *
def gcd(a,b):
    if a==0:
        return b
    return gcd(b%a,a)
pf=[]
n=int(input("Enter number:"))
x=n
while n%2==0:
    pf.append(2)
    n=n/2
i=3
while i<=sqrt(n):
    while n%1==0:
        pf.append(i)
        n=n/i
        i=i+2
    if n>2:
        pf.append(n)
print("prime factor of",x,"are",pf)
pf1=set(pf)
nf=1
for f in pf1:
    cnt=0
    for f1 in pf:
        if f==f1:

            cnt+=1
            nf*=cnt+1
print("No of factors of ",x," = ",nf)
print("No of positive integral solutions = ",nf/2)
print("Greatest Common Divisor of 45 and 15 = ",gcd(15,45))


