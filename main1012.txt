Aim: Write a python program to perform translation operation on rectangle by
taking initial coordinates from user

import tkinter as tk

# Function to translate the rectangle
def translate_rectangle():
    # Get the translation values from the user
    try:
        dx = float(dx_entry.get())
        dy = float(dy_entry.get())
    except ValueError:
        result_label.config(text="Invalid input")
        return
    
    # Update the rectangle's coordinates
    canvas.move(rectangle, dx, dy)
    # Clear the result label
    result_label.config(text="")

# Create the main window
root = tk.Tk()
root.title("Rectangle Translation")

# Create a canvas to draw the rectangle
canvas = tk.Canvas(root, width=400, height=400)
canvas.pack()

# Get initial coordinates from the user
x1 = float(input("Enter initial x-coordinate of the top-left corner: "))
y1 = float(input("Enter initial y-coordinate of the top-left corner: "))
x2 = float(input("Enter initial x-coordinate of the bottom-right corner: "))
y2 = float(input("Enter initial y-coordinate of the bottom-right corner: "))

# Create a rectangle on the canvas
rectangle = canvas.create_rectangle(x1, y1, x2, y2, fill="blue")

# Create input fields for translation values
dx_label = tk.Label(root, text="Translate X:")
dx_label.pack()
dx_entry = tk.Entry(root)
dx_entry.pack()

dy_label = tk.Label(root, text="Translate Y:")
dy_label.pack()
dy_entry = tk.Entry(root)
dy_entry.pack()

# Create a button to perform translation
translate_button = tk.Button(root, text="Translate", command=translate_rectangle)
translate_button.pack()

# Label to display the result or error message
result_label = tk.Label(root, text="")
result_label.pack()

# Start the Tkinter main loop
root.mainloop()

--------------------------------------------------------------------------------------------------------

Practical No2:
Aim: Write a python program to perform scaling operation on triangle by taking initial coordinates from user.

from tkinter import Tk, Canvas

root = Tk()

C = Canvas(root, bg="gray", height=700, width=700)
C.create_text(100, 40, text="Triangle Before scaling", fill="black", font=('Consolas'))

x0 = int(input("Enter x0: ")   #100,100,50,200,150,200
y0 = int(input("Enter y0: ")
x1 = int(input("Enter x1: ")
y1 = int(input("Enter y1: ")
x2 = int(input("Enter x2: ")
y2 = int(input("Enter y2: ")

C.create_polygon(x0, y0, x1, y1, x2, y2, fill="green")

SX = 2
SY = 2

# Calculate the scaled coordinates
x0_scaled = x0 * SX
y0_scaled = y0 * SY
x1_scaled = x1 * SX
y1_scaled = y1 * SY
x2_scaled = x2 * SX
y2_scaled = y2 * SY

# Create the text elements after creating the triangles
C.create_text(225, 130, text="Triangle After scaling", fill="black", font=('Consolas'))

# Create the scaled triangle
C.create_polygon(x0_scaled, y0_scaled, x1_scaled, y1_scaled, x2_scaled, y2_scaled, fill="blue")

C.pack()
root.mainloop()

-------------------------------------------------------------------------------------------------------------------------

Practical No3:
Aim: Write a python program to perform reflection operation on polygon by taking
initial coordinates from user.

import math
from tkinter import *

root = Tk()
C = Canvas(root, bg="gray", height=1000, width=1000)

x0 = int(input("Enter the x0 coordinate: "))         #100,100,50,200,150,200
y0 = int(input("Enter the y0 coordinate: "))
x1 = int(input("Enter the x1 coordinate: "))
y1 = int(input("Enter the y1 coordinate: "))
x2 = int(input("Enter the x2 coordinate: "))
y2 = int(input("Enter the y2 coordinate: "))

C.create_text(150, 40, text="Reflection in Triangle", fill="black", font=('Helvetica 15 bold'))

# Original triangle
triangle_1 = C.create_polygon(x0, y0, x1, y1, x2, y2, fill="red")

width = max(x0, x1, x2)
imaginary_axis = x1 - 10  # Adjust the imaginary axis as needed

# Calculate the reflected coordinates of the vertices
a = max(x0, x1, x2)

x0_reflected = (2 * a - x0) + width + 10
x1_reflected = (2 * a - x1) + width + 10
x2_reflected = (2 * a - x2) + width + 10

# Reflected triangle
triangle_2 = C.create_polygon(x0_reflected, y0, x1_reflected, y1, x2_reflected, y2, fill="blue")

C.pack()
root.mainloop()

-------------------------------------------------------------------------------------------------------------------

Practical No4:
Aim: Write a python program to rotate right angle triangle by 45 degree by taking initial coordinates from user.

import math
from tkinter import *

root = Tk()

n = int(input("Enter angle: "))
a = math.cos(math.radians(n))
b = math.sin(math.radians(n))

x0 = int(input("Enter x0: "))             #45,100,100,50,200,150,200
y0 = int(input("Enter y0: "))
x1 = int(input("Enter x1: "))
y1 = int(input("Enter y1: "))
x2 = int(input("Enter x2: "))
y2 = int(input("Enter y2: "))

C = Canvas(root, bg="gray", height=1000, width=1000)
C.create_text(150, 40, text="Triangle Before rotation", fill="green", font=('Consolas'))
triangle1 = C.create_polygon(x0, y0, x1, y1, x2, y2, fill="green")

x11 = abs(x0 * a - y0 * b)
y11 = abs(x0 * b + y0 * a)
x12 = abs(x1 * a - y1 * b)
y12 = abs(x1 * b + y1 * a)
x13 = abs(x2 * a - y2 * b)
y13 = abs(x2 * b + y2 * a)

C.create_text(150, 200, text="Triangle After rotation", fill="blue", font=('Consolas'))
triangle2 = C.create_polygon(x11, y11, x12, y12, x13, y13, fill="blue")

C.pack()
root.mainloop()

-----------------------------------------------------------------------------------------------------------------------

Practical No5:
Aim: Write a python program to perform shearing on rectangle in positive
direction of x-axis by taking initial coordinates from user.


from tkinter import *
import math

root = Tk()
C = Canvas(root, bg="gray", height=1000, width=1000)

# Taking input of coordinates from the user
x0 = int(input("Enter x0: "))
y0 = int(input("Enter y0: "))     #100,100,100,200,300,200,300,100,angle=50
x1 = int(input("Enter x1: "))
y1 = int(input("Enter y1: "))
x2 = int(input("Enter x2: "))
y2 = int(input("Enter y2: "))
x3 = int(input("Enter x3: "))
y3 = int(input("Enter y3: "))
b = int(input("Enter angle of Shearing: "))

shape1 = C.create_polygon(x0, y0, x1, y1, x2, y2, x3, y3, fill="green")

xsh1 = (x0 + y0 * math.tan(math.radians(b)))
xsh2 = (x3 + y3 * math.tan(math.radians(b))

shape2 = C.create_polygon(xsh1, y0, x1, y1, x2, y2, xsh2, y3, fill="blue")

C.pack()
root.mainloop()

-------------------------------------------------------------------------------------------------------------------

Practical No 6: Write a python program to create below shape and perform
reflection about parallel to y-axis, followed by translation and scaling operation on it.

import math
from tkinter import *

root = Tk()
C = Canvas(root, bg="yellow", height=1000, width=1200)

C.create_text(100, 10, text="Reflection", fill="black")   # you can edit as 40

# Define the original coordinates of the polygon
x1, y1 = 50, 10
x2, y2 = 25, 30
x3, y3 = 50, 50
x4, y4 = 50, 40      #67
x5, y5 = 150, 40
x6, y6 = 150, 20
x7, y7 = 50, 20

# Create the original polygon
C.create_polygon(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, fill="black")

# Input the arbitrary axis value (a)
a = float(input("Enter arbitrary axis: "))

# Calculate the reflected coordinates
y11 = -y1 + (2 * a)
y21 = -y2 + (2 * a)
y31 = -y3 + (2 * a)
y41 = -y4 + (2 * a)
y51 = -y5 + (2 * a)
y61 = -y6 + (2 * a)
y71 = -y7 + (2 * a)

# Create the reflected polygon
C.create_polygon(x1, y11, x2, y21, x3, y31, x4, y41, x5, y51, x6, y61, x7, y71, fill="black")

# Translation
tx = 500
ty = 500

# Create the translated polygon
C.create_polygon(x1 + tx, y11 + ty, x2 + tx, y21 + ty, x3 + tx, y31 + ty, x4 + tx, y41 + ty, x5 + tx, y51 + ty, x6 + tx, y61 + ty, x7 + tx, y71 + ty, fill="red")

# Scaling
SX = 2
SY = 2

# Create the scaled polygon
C.create_polygon(x1 * SX, y11 * SY, x2 * SX, y21 * SY, x3 * SX, y31 * SY, x4 * SX, y41 * SY, x5 * SX, y51 * SY, x6 * SX, y61 * SY, x7 * SX, y71 * SY, fill="red")

C.pack()
root.mainloop()

-----------------------------------------------------------------------------------------------------------

Practical No7: Implement space invader game in python using pygame module.

import math
import pygame
import random
from pygame import mixer

# Initialization
pygame.init()

# Display size
screen = pygame.display.set_mode((800, 600))

# Title
pygame.display.set_caption("Space Invader")

# Icon
icon = pygame.image.load("spaceship.png")
pygame.display.set_icon(icon)

# Background sound
mixer.music.load("background.wav")
mixer.music.play(-1)

# Player
playerImg = pygame.image.load("assasin.png")
playerX = 370
playerY = 480
playerX_change = 0

# Enemy
enemyImg = []
enemyX = []
enemyY = []
enemyX_change = []
enemyY_change = []
no_of_enemies = 6

for i in range(no_of_enemies):
    enemyImg.append(pygame.image.load("enemy (1).png"))
    enemyX.append(random.randint(0, 735))
    enemyY.append(random.randint(60, 150))
    enemyX_change.append(3)
    enemyY_change.append(40)

# Background
bgImg = pygame.image.load("background (1).png")

# Bullet
bulletImg = pygame.image.load("bullet.png")
bulletX = 0
bulletY = 480
bulletX_change = 0
bulletY_change = 10
bullet_state = "ready"

# Score value
score_value = 0

# Text for score display
textX = 10
font = pygame.font.Font("freesansbold.ttf", 32)
textY = 10

# Game over text
game_over_font = pygame.font.Font("freesansbold.ttf", 64)

# Game over function
def game_over_text():
    game_over = game_over_font.render("Game Over", True, (255, 255, 255))
    screen.blit(game_over, (200, 250))

# Score function
def show_score(x, y):
    score = font.render("Score: " + str(score_value), True, (255, 255, 255))
    screen.blit(score, (x, y))

# Collision function
def isCollision(enemyX, enemyY, bulletX, bulletY):
    distance = math.sqrt((math.pow(enemyX - bulletX, 2)) + (math.pow(enemyY - bulletY, 2))
    if distance < 27:
        return True
    else:
        return False

def player(x, y):
    screen.blit(playerImg, (x, y))

def enemy(x, y, i):
    screen.blit(enemyImg[i], (x, y))

def fire_bullet(x, y):
    global bullet_state
    bullet_state = "fire"
    screen.blit(bulletImg, (x + 16, y - 10))

running = True

# Game window stays open until closed
while running:
    screen.fill((0, 0, 0))  # Background Color
    screen.blit(bgImg, (0, 0))  # Background Image

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                playerX_change = -4
            if event.key == pygame.K_RIGHT:
                playerX_change = 4
            if event.key == pygame.K_SPACE:
                if bullet_state == "ready":
                    bullet_sound = mixer.Sound("laser.wav")
                    bullet_sound.play()
                    bulletX = playerX
                    fire_bullet(bulletX, bulletY)

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                playerX_change = 0

    # Bullet Movement
    if bulletY <= 0:
        bulletY = 480
        bullet_state = "ready"

    if bullet_state == "fire":
        fire_bullet(bulletX, bulletY)
        bulletY -= bulletY_change

    playerX += playerX_change

    # Player boundary
    if playerX <= 0:
        playerX = 0
    elif playerX >= 736:  # Size of player is 64, so we subtract 64 from 800
        playerX = 736

    # Enemy boundary
    for i in range(no_of_enemies):
        # Game over code
        if enemyY[i] > 400:
            for i in range(no_of_enemies):
                enemyY[i] = 2000
            game_over_text()
            break

        enemyX[i] += enemyX_change[i]
        if enemyX[i] <= 0:
            enemyX_change[i] = 3
            enemyY[i] += enemyY_change[i]
        elif enemyX[i] >= 735:
            enemyX_change[i] = -3
            enemyY[i] += enemyY_change[i]

        # Checking collision
        collision = isCollision(enemyX[i], enemyY[i], bulletX, bulletY)
        if collision:
            explosion_sound = mixer.Sound("explosion.wav")
            explosion_sound.play()
            bulletY = 480
            bullet_state = "ready"
            score_value += 1
            enemyX[i] = random.randint(0, 735)
            enemyY[i] = random.randint(50, 150)
        enemy(enemyX[i], enemyY[i], i)

    show_score(textX, textY)
    player(playerX, playerY)
    pygame.display.update()

----------------------------------------------------------------------------------------------------------------------

Practical No8: Implement Snake game in python using pygame module.

import pygame, sys, random
from pygame.math import Vector2

class SNAKE:
    def __init__(self):
        self.body = [Vector2(5, 10), Vector2(4, 10), Vector2(3, 10)]
        self.direction = Vector2(1, 0)
        self.new_block = False

    def draw_snake(self):
        for block in self.body:
            x_pos = int(block.x * cell_size)
            y_pos = int(block.y * cell_size)
            block_rect = pygame.Rect(x_pos, y_pos, cell_size, cell_size)
            pygame.draw.rect(screen, (183, 111, 122), block_rect)

    def move_snake(self):
        if self.new_block:
            body_copy = self.body[:]
            body_copy.insert(0, body_copy[0] + self.direction)
            self.body = body_copy[:]
            self.new_block = False
        else:
            body_copy = self.body[:-1]
            body_copy.insert(0, body_copy[0] + self.direction)
            self.body = body_copy[:]

    def add_block(self):
        self.new_block = True

    def reset(self):
        self.body = [Vector2(5, 10), Vector2(4, 10), Vector2(3, 10)]

class FRUIT:
    def __init__(self):
        self.randomize()

    def draw_fruit(self):
        fruit_rect = pygame.Rect(int(self.pos.x * cell_size), int(self.pos.y * cell_size), cell_size, cell_size)
        screen.blit(apple, fruit_rect)

    def randomize(self):
        self.x = random.randint(0, cell_number - 1)
        self.y = random.randint(0, cell_number - 1)
        self.pos = Vector2(self.x, self.y)

class MAIN:
    def __init__(self):
        self.snake = SNAKE()
        self.fruit = FRUIT()

    def update(self):
        self.snake.move_snake()
        self.check_collision()
        self.check_fail()

    def draw_elements(self):
        self.draw_grass()
        self.fruit.draw_fruit()
        self.snake.draw_snake()
        self.draw_score()

    def check_collision(self):
        if self.fruit.pos == self.snake.body[0]:
            self.fruit.randomize()
            self.snake.add_block()
        for block in self.snake.body[1:]:
            if block == self.fruit.pos:
                self.fruit.randomize()

    def check_fail(self):
        if not (0 <= self.snake.body[0].x < cell_number) or not (0 <= self.snake.body[0].y < cell_number):
            self.game_over()
        for block in self.snake.body[1:]:
            if block == self.snake.body[0]:
                self.game_over()

    def game_over(self):
        self.snake.reset()

    def draw_grass(self):
        grass_color = (167, 209, 61)
        for row in range(cell_number):
            if row % 2 == 0:
                for col in range(cell_number):
                    if col % 2 == 0:
                        grass_rect = pygame.Rect(col * cell_size, row * cell_size, cell_size, cell_size)
                        pygame.draw.rect(screen, grass_color, grass_rect)

    def draw_score(self):
        score_text = str(len(self.snake.body) - 3)
        score_surface = game_font.render(score_text, True, (56, 74, 12))
        score_x = int(cell_size * cell_number - 60)
        score_y = int(cell_size * cell_number - 40)
        score_rect = score_surface.get_rect(center=(score_x, score_y))
        apple_rect = apple.get_rect(midleft=(score_rect.right, score_rect.centery))
        screen.blit(score_surface, score_rect)
        screen.blit(apple, apple_rect)

pygame.init()

cell_size = 40
cell_number = 20
screen = pygame.display.set_mode((cell_number * cell_size, cell_number * cell_size))
clock = pygame.time.Clock()
apple = pygame.image.load('apple_2.png').convert_alpha()
game_font = pygame.font.Font('Fonts/Poetsenone-Regular.ttf', 24)

SCREEN_UPDATE = pygame.USEREVENT
pygame.time.set_timer(SCREEN_UPDATE, 150)

main_game = MAIN()

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == SCREEN_UPDATE:
            main_game.update()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                if main_game.snake.direction.y != 1:
                    main_game.snake.direction = Vector2(0, -1)
            if event.key == pygame.K_DOWN:
                if main_game.snake.direction.y != -1:
                    main_game.snake.direction = Vector2(0, 1)
            if event.key == pygame.K_RIGHT:
                if main_game.snake.direction.x != -1:
                    main_game.snake.direction = Vector2(1, 0)
            if event.key == pygame.K_LEFT:
                if main_game.snake.direction.x != 1:
                    main_game.snake.direction = Vector2(-1, 0)

    screen.fill((175, 215, 70))
    main_game.draw_elements()
    pygame.display.update()
    clock.tick(15)  # frame rate

----------------------------------------------------------------------------------------------------------------------

Practical No9:

Aim: Implement 2D UFO game using unity

PlayerController.css:

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PlayerController : MonoBehaviour
{
    public Text winText;
    public Text countText;
    public int count = 0;  // we have to add from  (=0) if not work remove it
    private Rigidbody rbd;
    public float speed;

    // Start is called before the first frame update
    void Start()
    {
        rbd = GetComponent<Rigidbody>();
        count = 0;                // extra add by gpt
        SetCountText();           // extra add by gpt
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");
        Vector3 movement = new Vector3(moveHorizontal, 0.0f, moveVertical);
        rbd.AddForce(movement * speed);
    }

    void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Pickup"))
        {
            other.gameObject.SetActive(false);
            count++;
            SetCountText();
        }
    }

    void SetCountText()
    {
        countText.text = "Score: " + count.ToString();
        if (count >= 12)
        {
            winText.text = "You Win!";
        }
    }
}


CameraController.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraFollow : MonoBehaviour
{   
    public Gameobject player;
    private Vector3 offset;

    void Start()
    {
        offset = transform.position - player.transform.position;
    }

    // Update is called once per frame
    void LateUpdate()
    {
        transform.position = player.transform.position + offset;
    }
}


Rotator.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Rotator : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        // Initialization code can go here if needed
    }

    // Update is called once per frame
    void Update()
    {
        transform.Rotate(new Vector3(0, 0, 45) * Time.deltaTime);
    }
}

---------------------------------------------------------------------------------------------------------------------

Practical No10:
Aim: Implement 3D roll ball game using unity.

PlayerController.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PlayerController : MonoBehaviour
{
    public Text winText;
    public Text countText;
    public int count;
    private Rigidbody rb;
    public float speed;

    void Start()
    {
        count = 0;
        rb = GetComponent<Rigidbody>();
        SetCountText();
    }

    void Update()
    {
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");
        Vector3 movement = new Vector3(moveHorizontal, 0.0f, moveVertical);
        rb.AddForce(movement * speed);
    }

    void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.CompareTag("PickUp"))
        {
            other.gameObject.SetActive(false);
            count+1;
            SetCountText();
        }
    }

    void SetCountText()
    {
        countText.text = "Score: " + count.ToString();
        if (count >= 11)
        {
            winText.text = "You Win!";
        }
    }
}

CameraController.cs


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraController : MonoBehaviour
{
    private Vector3 offset;
    public GameObject player;

    void Start()
    {
        offset = transform.position - player.transform.position;
    }

    void LateUpdate()
    {
        transform.position = player.transform.position + offset;
    }
}

Rotator.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Rotator : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        // You can add your initialization code here
    }

    // Update is called once per frame
    void Update()
    {
        // Rotate the object by the specified angles over time
        transform.Rotate(new Vector3(15, 30, 45) * Time.deltaTime);
    }
}


https://raw.githubusercontent.com/kibson6781/Kibson-678/main/andk.txt
https://github.com/kibson6781/Kibson-678/blob/main/TCS2324100%20Game%20Programming%20Journal_removed.pdf




import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH = 400
SCREEN_HEIGHT = 400
GRID_SIZE = 15
GRID_WIDTH = SCREEN_WIDTH // GRID_SIZE
GRID_HEIGHT = SCREEN_HEIGHT // GRID_SIZE

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)

# Snake Directions
UP = (0, -1)
DOWN = (0, 1)
LEFT = (-1, 0)
RIGHT = (1, 0)

# Game variables
snake = [(5, 5)]
snake_direction = RIGHT
food = (random.randint(0, GRID_WIDTH - 1), random.randint(0, GRID_HEIGHT - 1))
score = 0

# Initialize the screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Snake Game")

# Font
font = pygame.font.Font(None, 36)

# Main game loop
clock = pygame.time.Clock()

def draw_score():
    text = font.render(f"Score: {score}", True, WHITE)
    screen.blit(text, (10, 10))

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP and snake_direction != DOWN:
                snake_direction = UP
            elif event.key == pygame.K_DOWN and snake_direction != UP:
                snake_direction = DOWN
            elif event.key == pygame.K_LEFT and snake_direction != RIGHT:
                snake_direction = LEFT
            elif event.key == pygame.K_RIGHT and snake_direction != LEFT:
                snake_direction = RIGHT

    # Move the snake
    x, y = snake[0]
    new_head = (x + snake_direction[0], y + snake_direction[1])
    snake.insert(0, new_head)

    # Check for collisions with food
    if snake[0] == food:
        score += 1
        food = (random.randint(0, GRID_WIDTH - 1), random.randint(0, GRID_HEIGHT - 1))
    else:
        snake.pop()

    # Check for collisions with the wall
    if (
        snake[0][0] < 0
        or snake[0][0] >= GRID_WIDTH
        or snake[0][1] < 0
        or snake[0][1] >= GRID_HEIGHT
    ):
        pygame.quit()
        sys.exit()

    # Check for self-collision
    if snake[0] in snake[1:]:
        pygame.quit()
        sys.exit()

    # Clear the screen
    screen.fill(BLACK)

    # Draw the snake
    for segment in snake:
        pygame.draw.rect(
            screen,
            GREEN,
            (segment[0] * GRID_SIZE, segment[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE),
        )

    # Draw the food
    pygame.draw.rect(
        screen,
        WHITE,
        (food[0] * GRID_SIZE, food[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE),
    )

    # Draw the score
    draw_score()

    # Update the display
    pygame.display.update()

    # Control the game speed
    clock.tick(10)

---------------------------------------------------------------------------------------------



import random
import pygame
import math
from pygame import mixer


# Initialization
pygame.init()
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("Space Invader")
# Icon Set
icon1 = pygame.image.load("ufo.jpg")
pygame.display.set_icon(icon1)
#background song
mixer.music.load("background.wav")
mixer.music.play(-1)


#player
playerImg = pygame.image.load("player.jpg")
playerX = 370
playerY = 480
playerX_change = 0

# Bullet
bulletImg = pygame.image.load("bullet.jpg")
bulletX = 0
bulletY = 480
bulletX_change = 0
bulletY_change = 10
bullet_state = "ready"
score_value=0
#adding font for displaying score
font=pygame.font.Font("freesansbold.ttf",32)
textX=10
textY=10
#adding font for displaying game over
over_font=pygame.font.Font("freesansbold.ttf",70)


def show_score(x,y):
    score=font.render("Score:"+str(score_value),True,(255,255,255))
    screen.blit(score,(x,y))
def game_over_text():
    over_text=over_font.render("GAME OVER",True,(255,255,255))
    screen.blit(over_text,(200,250))

# Enemy
enemyImg=[]
enemyX=[]
enemyY=[]
enemyX_change=[]
enemyY_change=[]
no_of_enemies=6


for i in range(no_of_enemies):
    enemyImg.append(pygame.image.load("enemy.jpg"))

    enemyX.append(random.randint(0, 735))
    enemyY.append(random.randint(50, 150))
    enemyX_change.append(3)
    enemyY_change.append(40)

# background image

background = pygame.image.load("background.jpg")

#collision function
def isCollision(enemyX,enemyY,bulletX,bulletY):
    distance=math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))
    if distance<27:
        return True
    else:
        return False


def fire_bullet(x, y):
    global bullet_state
    bullet_state = "fire"
    screen.blit(bulletImg, (x + 16, y + 10))


def player(x, y):
    screen.blit(playerImg, (x, y))


def enemy(x,y,i):
    screen.blit(enemyImg[i], (x, y))


running = True
# Game Window
while running:
    screen.fill((200, 100, 35))
    screen.blit(background, (0, 0))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                playerX_change = -2
            if event.key == pygame.K_RIGHT:
                playerX_change = 2
            if event.key == pygame.K_SPACE:
                if bullet_state is "ready":
                    bullet_sound=mixer.Sound("laser.wav")
                    bullet_sound.play()

                    bulletX = playerX
                    fire_bullet(bulletX, bulletY)
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                playerX_change = 0
    playerX += playerX_change

    # Bullet Movement
    if bulletY <= 0:
        bulletY = 480
        bullet_state = "ready"
    if bullet_state is "fire":
        fire_bullet(bulletX, bulletY)
        bulletY -= bulletY_change
    playerX += playerX_change

    #enemy movement

    for i in range(no_of_enemies):
        #game over
        if enemyY[i]>400:
            for j in range(no_of_enemies):
                enemyY[i]=2000
            game_over_text()
            break
        enemyX[i] += enemyX_change[i]
        if enemyX[i] <= 0:
            enemyX_change[i] = 1
            enemyY[i] += enemyY_change[i]
        elif enemyX[i] >= 736:
            enemyX_change[i] = -1
            enemyY[i] += enemyY_change[i]
        #collision
        collision = isCollision(enemyX[i], enemyY[i], bulletX, bulletY)
        if collision:
            explosion_sound=mixer.Sound("explosion.wav")
            explosion_sound.play()
            bulletY = 480
            bullet_state = "ready"
            score_value += 1

            enemyX[i] = random.randint(0, 735)
            enemyY[i] = random.randint(50, 150)
        enemy(enemyX[i], enemyY[i],i)

    # player boundary
    if playerX <= 0:
        playerX = 0
    elif playerX >= 736:  # considering spaceship
        playerX = 736





    player(playerX, playerY)
    show_score(textX,textY)

    pygame.display.update()
