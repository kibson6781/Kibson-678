AIM :
Write programs to implement the following Substitution
Cipher Techniques: 1) Caesar Cipher. 2) Monoalphabetic Cipher 


 1) Caesar Cipher

import java.util.*;

class CaesarCipher {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int shift, i, n;
        String str;
        String str1 = "";
        String str2 = "";

        System.out.println("Enter the plaintext");
        str = sc.nextLine();
        str = str.toLowerCase();
        n = str.length();
        char ch1[] = str.toCharArray();
        char ch3, ch4;

        System.out.println("Enter the value by which each letter of the string is to be shifted");
        shift = sc.nextInt();

        System.out.println();
        System.out.println("Encrypted text is");
        for (i = 0; i < n; i++) {
            if (Character.isLetter(ch1[i])) {
                ch3 = (char)(((int)ch1[i] + shift - 97) % 26 + 97);
                str1 = str1 + ch3;
            } else if (ch1[i] == ' ') {
                str1 = str1 + ch1[i];
            }
        }
        System.out.println(str1);

        System.out.println();
        System.out.println("Decrypted text is");

        char ch2[] = str1.toCharArray();
        for (i = 0; i < str1.length(); i++) {
            if (Character.isLetter(ch2[i])) {
                if (((int)ch2[i] - shift) < 97) {
                    ch4 = (char)(((int)ch2[i] - shift - 97 + 26) % 26 + 97);
                } else {
                    ch4 = (char)(((int)ch2[i] - shift - 97) % 26 + 97);
                }
                str2 = str2 + ch4;
            } else if (ch2[i] == ' ') {
                str2 = str2 + ch2[i];
            }
        }
        System.out.println(str2);
    }
}

2) Monoalphabetic Cipher 

Cipher.java




class Cipher {

    static final String alphabet = "abcdefghijklmnopqrstuvwxyz";

    public static char shift(char ch, int amount) {
        return alphabet.charAt((alphabet.indexOf(ch) + amount) % alphabet.length());
    }

    public static String caesarCipher(String text, int amount) {
        String result = "";
        for (char ch : text.toCharArray()) {
            if (alphabet.indexOf(ch) >= 0) {
                result += shift(ch, amount);
            }
        }
        return result;
    }

    public static void main(String[] args) {
        assert shift('a', 1) == 'b';
        assert shift('z', 2) == 'b';
        assert caesarCipher("abc", 2).equals("cde");
    }
}


Gui.java


import javax.swing.*;        
import java.awt.*;
import java.awt.event.*;

public class Gui {

    private static void createAndShowGUI() {
        //Create and set up the window.
        JFrame frame = new JFrame("HelloWorldSwing");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel body = new JPanel();

        final JTextField label = new JTextField("aaaaaaaaaaaaaaaaaaaaaaa");
        body.add(label);

        final JTextField key = new JTextField("1");
        body.add(key);

        final JTextField result = new JTextField("bbbbbbbbbbbbbbbbbbbbbb");


        JButton activationButton = new JButton("Encrypt");
        activationButton.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                String plainText = label.getText();
                String keyval = key.getText();
                result.setText(Cipher.caesarCipher(plainText, Integer.parseInt(keyval)));
            }
        });

        body.add(activationButton);

        body.add(result);

        frame.add(body);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
}

--------------------------------------------------------------------------------------------------------------

AIM :
Write programs to implement the following Substitution
Cipher Techniques: 3) Vernam Cipher. 4) Playfair Cipher 

3) Vernam Cipher

import java.util.*;

public class vernam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter Plain Text:");
        String pt = sc.next();
        int strlen = pt.length();

        System.out.println("Keyword:");
        String keyword = key(strlen);
        System.out.println(keyword);

        System.out.println("Encrypted Text");
        String et = encrypt(pt, keyword);
        System.out.println(et);
    }

    public static String encrypt(String pt, String key) {
        int a, b, c;
        StringBuilder et = new StringBuilder(pt.length());
        for (int i = 0; i < pt.length(); i++) {
            a = av(pt.charAt(i));
            b = av(key.charAt(i));
            c = (a + b) % 26;
            et = et.append((char) nv(c));
        }

        return et.toString();
    }

    public static String key(int n) {
        int a = 97;
        int z = 122;
        int strlen = n;
        Random random = new Random();
        StringBuilder buffer = new StringBuilder(strlen);
        for (int i = 0; i < strlen; i++) {
            int rli = a + (int) (random.nextFloat() * (z - a + 1));
            buffer.append((char) rli);
        }
        String keyword = buffer.toString();
        return keyword;
    }

    public static int av(char x) {
        int y = (int) 'a';
        return ((int) x - y);
    }

    public static char nv(int x) {
        int z = x + (int) 'a';
        return ((char) z);
    }
}


4) Playfair Cipher 

import java.awt.Point;
import java.util.Scanner;

public class PlayfairCipher {
    private int length = 0;
    private String[][] table;

    public static void main(String args[]) {
        PlayfairCipher pf = new PlayfairCipher();
    }

    private PlayfairCipher() {
        System.out.print("Enter the key for playfair cipher: ");
        Scanner sc = new Scanner(System.in);
        String key = parseString(sc);
        while (key.equals(""))
            key = parseString(sc);
        table = this.cipherTable(key);

        System.out.print("Enter the plaintext to be encipher: ");
        String input = parseString(sc);
        while (input.equals(""))
            input = parseString(sc);
        String output = cipher(input);
        String decodedOutput = decode(output);
        this.keyTable(table);
        this.printResults(output, decodedOutput);
    }

    private String parseString(Scanner sc) {
        String parse = sc.nextLine();
        parse = parse.toUpperCase();
        parse = parse.replaceAll("[^A-Z]", "");
        parse = parse.replace("J", "I");
        return parse;
    }

    private String[][] cipherTable(String key) {
        String[][] playfairTable = new String[5][5];
        String keyString = key + "ABCDEFGHIKLMNOPQRSTUVWXYZ";

        for (int i = 0; i < 5; i++)
            for (int j = 0; j < 5; j++)
                playfairTable[i][j] = "";

        for (int k = 0; k < keyString.length(); k++) {
            boolean repeat = false;
            boolean used = false;

            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 5; j++) {
                    if (playfairTable[i][j].equals("" + keyString.charAt(k))) {
                        repeat = true;
                    } else if (playfairTable[i][j].equals("") && !repeat && !used) {
                        playfairTable[i][j] = "" + keyString.charAt(k);
                        used = true;
                    }
                }
            }
        }
        return playfairTable;
    }

    private String cipher(String in) {
        length = (int) in.length() / 2 + in.length() % 2;

        for (int i = 0; i < (length - 1); i++) {
            if (in.charAt(2 * i) == in.charAt(2 * i + 1)) {
                in = new StringBuffer(in).insert(2 * i + 1, 'X').toString();
                length = (int) in.length() / 2 + in.length() % 2;
            }
        }

        String[] digraph = new String[length];
        for (int j = 0; j < length; j++) {
            if (j == (length - 1) && in.length() / 2 == (length - 1))
                in = in + "X";
            digraph[j] = in.charAt(2 * j) + "" + in.charAt(2 * j + 1);
        }

        String out = "";
        String[] encDigraphs = new String[length];
        encDigraphs = encodeDigraph(digraph);
        for (int k = 0; k < length; k++)
            out = out + encDigraphs[k];
        return out;
    }

    private String[] encodeDigraph(String di[]) {
        String[] encipher = new String[length];

        for (int i = 0; i < length; i++) {
            char a = di[i].charAt(0);
            char b = di[i].charAt(1);
            int r1 = (int) getPoint(a).getX();
            int r2 = (int) getPoint(b).getX();
            int c1 = (int) getPoint(a).getY();
            int c2 = (int) getPoint(b).getY();

            if (r1 == r2) {
                c1 = (c1 + 1) % 5;
                c2 = (c2 + 1) % 5;
            } else if (c1 == c2) {
                r1 = (r1 + 1) % 5;
                r2 = (r2 + 1) % 5;
            } else {
                int temp = c1;
                c1 = c2;
                c2 = temp;
            }
            encipher[i] = table[r1][c1] + "" + table[r2][c2];
        }
        return encipher;
    }

    private String decode(String out) {
        String decoded = "";
        for (int i = 0; i < out.length() / 2; i++) {
            char a = out.charAt(2 * i);
            char b = out.charAt(2 * i + 1);
            int r1 = (int) getPoint(a).getX();
            int r2 = (int) getPoint(b).getX();
            int c1 = (int) getPoint(a).getY();
            int c2 = (int) getPoint(b).getY();

            if (r1 == r2) {
                c1 = (c1 + 4) % 5;
                c2 = (c2 + 4) % 5;
            } else if (c1 == c2) {
                r1 = (r1 + 4) % 5;
                r2 = (r2 + 4) % 5;
            } else {
                int temp = c1;
                c1 = c2;
                c2 = temp;
            }
            decoded = decoded + table[r1][c1] + table[r2][c2];
        }
        return decoded;
    }

    private Point getPoint(char c) {
        Point pt = new Point(0, 0);
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                if (c == table[i][j].charAt(0)) {
                    pt = new Point(i, j);
                }
            }
        }
        return pt;
    }

    private void keyTable(String[][] printTable) {
        System.out.println("Playfair Cipher Key Matrix: ");
        System.out.println();
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                System.out.print(printTable[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    private void printResults(String encipher, String dec) {
        System.out.print("Encrypted Message: ");
        System.out.println(encipher);
        System.out.println();
        System.out.print("Decrypted Message: ");
        System.out.println(dec);
    }
}

---------------------------------------------------------------------------------------------------------

Write programs to implement the following Transposition Cipher Techniques:
1) Rail Fence Cipher
2)Simple Columnar Technique 

1) Rail Fence Cipher

import java.util.*;

class RailFenceBasic {
    String Encryption(String plainText, int depth) {
        int r = depth, len = plainText.length();
        int c = len / depth;
        char mat[][] = new char[r][c];
        int k = 0;
        String cipherText = "";

        for (int i = 0; i < c; i++) {
            for (int j = 0; j < r; j++) {
                if (k != len)
                    mat[j][i] = plainText.charAt(k++);
                else
                    mat[j][i] = 'X';
            }
        }

        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                cipherText += mat[i][j];
            }
        }
        return cipherText;
    }

    String Decryption(String cipherText, int depth) {
        int r = depth, len = cipherText.length();
        int c = len / depth;
        char mat[][] = new char[r][c];
        int k = 0;
        String plainText = "";

        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                mat[i][j] = cipherText.charAt(k++);
            }
        }

        for (int i = 0; i < c; i++) {
            for (int j = 0; j < r; j++) {
                plainText += mat[j][i];
            }
        }
        return plainText;
    }
}

class RailFence {
    public static void main(String args[]) throws Exception {
        RailFenceBasic rf = new RailFenceBasic();
        Scanner scn = new Scanner(System.in);
        int depth;

        String plainText, cipherText, decryptedText;

        System.out.println("Enter plain text:");
        plainText = scn.nextLine();

        System.out.println("Enter depth for Encryption:");
        depth = scn.nextInt();

        cipherText = rf.Encryption(plainText, depth);
        System.out.println("Encrypted text is:\n" + cipherText);

        decryptedText = rf.Decryption(cipherText, depth);
        System.out.println("Decrypted text is:\n" + decryptedText);
    }
}


2)Simple Columnar Technique

import java.io.*;

class SCT {
    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter your plain text");
        String accept = br.readLine();

        System.out.println("Enter the number of rows ");
        int r = Integer.parseInt(br.readLine());
        System.out.println("Enter the number of cols");
        int c = Integer.parseInt(br.readLine());
        int count = 0;
        char cont[][] = new char[r][c];

        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (count >= accept.length()) {
                    cont[i][j] = ' ';
                    count++;
                } else {
                    cont[i][j] = accept.charAt(count);
                    count++;
                }
            }
        }

        System.out.println("\nEnter the order of cols you want to view them in");
        int choice[] = new int[c];

        for (int k = 0; k < c; k++) {
            System.out.print("Choice " + k + " -> ");
            choice[k] = Integer.parseInt(br.readLine());
        }

        System.out.println("\nCipher text in matrix is ->");
        String cipher = "";

        for (int j = 0; j < c; j++) {
            int k = choice[j];
            for (int i = 0; i < r; i++) {
                cipher += cont[i][k];
            }
        }

        cipher = cipher.trim();
        System.out.println(cipher);
    }
}

-----------------------------------------------------------------------------------------------------------

AIM :
Write programs to implement RSA algorithm to perform encryption/ decryption of a given string.

import java.math.BigInteger;
import java.util.Random;
import java.io.*;

public class RSA {
    private BigInteger p;
    private BigInteger q;
    private BigInteger N;
    private BigInteger phi;
    private BigInteger e;
    private BigInteger d;

    private int bitlength = 1024;
    private int blocksize = 256; // blocksize in bytes
    private Random r;

    public RSA() {
        r = new Random();
        System.out.println("r");
        System.out.println(r);

        p = BigInteger.probablePrime(bitlength, r);
        System.out.println("p");
        System.out.println(p);
        q = BigInteger.probablePrime(bitlength, r);
        System.out.println("q");
        System.out.println(q);

        N = p.multiply(q);
        System.out.println("N");
        System.out.println(N);

        phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
        System.out.println("phi");
        System.out.println(phi);

        e = BigInteger.probablePrime(bitlength / 2, r);
        System.out.println("e");
        System.out.println(e);

        while (phi.gcd(e).compareTo(BigInteger.ONE) > 0 && e.compareTo(phi) < 0) {
            e = e.add(BigInteger.ONE);
        }

        d = e.modInverse(phi);
        System.out.println("d");
        System.out.println(d);
    }

    public RSA(BigInteger e, BigInteger d, BigInteger N) {
        this.e = e;
        this.d = d;
        this.N = N;
    }

    public static void main(String[] args) throws IOException {
        RSA rsa = new RSA();
        DataInputStream in = new DataInputStream(System.in);
        String teststring;

        System.out.println("Enter the plain text:");
        teststring = in.readLine();
        System.out.println("Encrypting String: " + teststring);
        System.out.println("String in Bytes: " + bytesToString(teststring.getBytes()));

        // encrypt
        byte[] encrypted = rsa.encrypt(teststring.getBytes());
        System.out.println("Encrypted String in Bytes: " + bytesToString(encrypted));

        // decrypt
        byte[] decrypted = rsa.decrypt(encrypted);
        System.out.println("Decrypted String in Bytes: " + bytesToString(decrypted));
        System.out.println("Decrypted String: " + new String(decrypted));
    }

    private static String bytesToString(byte[] encrypted) {
        String test = "";
        for (byte b : encrypted) {
            test += Byte.toString(b);
        }
        return test;
    }

    // Encrypt message
    public byte[] encrypt(byte[] message) {
        return (new BigInteger(message)).modPow(e, N).toByteArray();
    }

    // Decrypt message
    public byte[] decrypt(byte[] message) {
        return (new BigInteger(message)).modPow(d, N).toByteArray();
    }
}

-----------------------------------------------------------------------------------------------------------------

Write programs to implement Diffie-Hellman Key
Agreement algorithm to generate symmetric keys.
1) DiffieHellman
2) Diffie_Hellman

1) DiffieHellman

import java.util.*;

class DiffieHellman {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the value of Xa & Xb");
        int Xa = sc.nextInt();
        int Xb = sc.nextInt();
        System.out.println("Enter a Prime no. p");
        int p = sc.nextInt();
        System.out.println("Enter Primitive Root a, with the condition that a < p");
        int a = sc.nextInt();
        
        int Ya = (int) ((Math.pow(a, Xa)) % p);
        int Yb = (int) ((Math.pow(a, Xb)) % p);
        int Ka = (int) ((Math.pow(Yb, Xa)) % p);
        int Kb = (int) ((Math.pow(Ya, Xb)) % p);
        
        if (Ka == Kb) {
            System.out.println("Transmission successful");
        } else {
            System.out.println("Transmission failed");
        }
    }
}

2) Diffie_Hellman

import java.util.*;

class Diffie_Hellman {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter modulo(p)");
        int p = sc.nextInt();
        System.out.println("Enter primitive root of " + p);
        int g = sc.nextInt();
        System.out.println("Choose 1st secret no (Alice)");
        int a = sc.nextInt();
        System.out.println("Choose 2nd secret no (Bob)");
        int b = sc.nextInt();

        int A = (int) Math.pow(g, a) % p;
        int B = (int) Math.pow(g, b) % p;

        int S_A = (int) Math.pow(B, a) % p;
        int S_B = (int) Math.pow(A, b) % p;

        if (S_A == S_B) {
            System.out.println("Alice and Bob can communicate with each other!!!");
            System.out.println("They share a secret number = " + S_A);
        } else {
            System.out.println("Alice and Bob cannot communicate with each other!!!");
        }
    }
}

---------------------------------------------------------------------------------------------------------------------

Aim:
Write programs to implement MD5 algorithm compute the message digest. 

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class JavaMD5Hash {
    public static void main(String[] args) {
        System.out.println("For null: " + generateHash(""));
        System.out.println("For simple text: " + generateHash("sies college."));
        System.out.println("For simple numbers: " + generateHash("12345"));
    }

    public static String generateHash(String input) {
        String md5 = null;

        if (null == input)
            return null;

        try {
            // Create MessageDigest object for MD5
            MessageDigest digest = MessageDigest.getInstance("MD5");

            // Update input string in message digest
            digest.update(input.getBytes(), 0, input.length());

            // Converts message digest value to base 16 (hex)
            md5 = new BigInteger(1, digest.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        return md5;
    }
}

-------------------------------------------------------------------------------------------------------------

AIM :
Write a program to calculate HMAC-SHA1 Signature

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class PasswordSha256 {
    public static void main(String[] args) throws NoSuchAlgorithmException {
        String password = "123457";
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        byte[] hashInBytes = md.digest(password.getBytes());

        // Convert bytes to hex
        StringBuilder sb = new StringBuilder();
        for (byte b : hashInBytes) {
            sb.append(String.format("%02x", b));
        }
        
        System.out.println(sb.toString());
    }
}

--------------------------------------------------------------------------------------------------------------------------


